---
layout: post
title: 연산자(Operator)
date: 2023-08-16
categories: JAVA
---
# 1. 산술 연산자

```
int num1 = 1;
int num2 = num1 + 2; // num2 -> 3
int num3 = num2 - 1; // num3 -> 2
int num4 = num3 * 3; // num4 -> 9
int num5 = num4 / 2; // num5 -> 4
int num6 = num5 % 3; // num6 -> 1
```
* 나눗셈 연산자와 나머지 연산자를 사용할 때는 우항에 0이 위치할 수 없습니다. 즉, 어떤 수를 0으로 나눌 수 없습니다. <br>
* 나눗셈 연산자를 사용할 때, 좌항과 우항이 모두 int형이면 그 결과도 int형이기 때문에 소수점 이하의 값은 버려지고, 오직 몫만 결과로 반환됩니다. <br>
* 우항 중 하나라도 실수 타입의 값이 존재한다면, 실수 타입이 아닌 값도 실수 타입으로 자동으로 형변환되어 계산되며, 결과적으로 실수 간의 나눗셈 연산이 되어 소수점이 버려지지 않은 온전한 값이 결과값으로 반환됩니다.

## 증감연산자
```
num1++; // num1 = num1 + 1;과 같습니다.
++num1; // num1 = num1 + 1;과 같습니다.

num2--; // num2 = num2 - 1;과 같습니다.
--num2; // num2 = num2 - 1;과 같습니다.
```

* 전위형 증감 연산자 : 증감 연산을 먼저 수행한 후, 그 결과값을 적용합니다.
* 후위형 증감 연산자 : 기존의 값을 먼저 적용하고 그다음에 증감 연산을 수행합니다.

## 복합 대입 연산자
```
num1 = num1 + 2; // 증감연산자는 1만 가능
num2 = num2 - 2; // 증감연산자는 1만 가능

num1 += 2; // 옮은 표현
num2 -= 2; // 옮은 표현

// num1~5의 값을 모두 10이라고 한다면,
num1 += 3; // num1 -> 13
num2 -= 3; // num2 -> 7
num3 *= 3; // num3 -> 30
num4 /= 3; // num4 -> 3
num5 %= 3; // num5 -> 1
```

# 2. 비교 연산자
boolean 타입으로 평가될 수 있는 조건식에 사용되며, 크게 대소 비교(>, <, <=, >=) 연산자와 등가 비교(==, !=) 연산자로 분류됩니다.

## 대소 비교 연산자

```
5 > 3	true
2 >= 3	false
```

## 등가 비교 연산자
기본 타입과 참조 타입 간에는 등가 비교 연산자를 사용할 수 없습니다. <br>
즉, 기본 타입의 값끼리, 혹은 참조 타입의 값끼리만 등가 비교 연산자를 사용할 수 있습니다.
```
5 == 5	true
3 != 2	true
3 != 3	false
```


참고: https://hello-backend.tistory.com/158

# 3. 논리 연산자

AND 연산자 &&, OR 연산자 ||, NOT 연산자 !를 포함하며, 공통으로 boolean 타입을 반환합니다.



