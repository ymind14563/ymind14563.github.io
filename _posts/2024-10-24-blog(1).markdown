---
layout: post  
title: "[SeSACx코딩온] ERD 테이블에서 상태 속성의 위치에 따른 차이"  
date: 2024-10-23 
categories: PROJECT
---

## 0. 매핑 테이블에 상태를 포함한 방식의 선택

초기 설계 단계에서는 상태 정보를 별도의 테이블로 분리하여 관리하려 했습니다. 
그러나 요구 사항을 분석한 결과, `상태 정보가 단순하고 복잡한 구조가 필요하지 않다는 결론`이 나왔습니다.
상태 정보는 주로 `차단 여부 및 수락 여부` 정도로 제한적이었기 때문에, 상태 정보를 `매핑 테이블에 포함시키는 방식이 더 효율적`이었습니다.

이 방식을 채택함으로써 데이터 모델이 단순화되었고, 일반적인 조회 및 수정 작업에서 성능이 향상되었습니다. 또한 관계와 상태 정보를 한 곳에서 관리하므로 유지보수도 용이해졌습니다. 

하지만, 상태 정보가 복잡하거나 확장 가능성이 높다면 별도의 상태 테이블을 사용하는 것이 더 적합할 수 있기 때문에 `별도 테이블을 구성하는 방식`과 `매핑 테이블에 포함하는 방식`에 대해 정리해보고자 합니다.

<br>
<br>


## 1. 상태 정보 관리 방법 개요

데이터베이스 설계에서 사용자와 모임 간의 관계를 어떻게 관리할지 결정하는 것은 시스템의 유연성, 성능, 유지보수성에 큰 영향을 미칩니다. 특히 활동 상태나 역할 같은 상태 정보를 어떻게 처리할 것인지가 중요한 설계 요소입니다.

<br>

## 2. 별도의 상태 테이블을 사용하는 경우

### 1) 사용자와 모임 테이블에서 상태 테이블을 직접 참조하는 방식

- 사용자나 모임 테이블에서 상태 정보를 참조하여 관리하는 방식입니다.

![image](https://github.com/user-attachments/assets/862809ad-dc24-41a3-accd-1e01de16499f)

- 장점
    - 데이터 정규화: 상태 정보를 분리하여 데이터 중복을 최소화하고 일관성을 유지할 수 있습니다.
    - 유연한 상태 관리: 상태 정보의 변경이 필요할 때 사용자나 모임 테이블을 수정할 필요 없이 상태 테이블만 변경하면 됩니다.
    - 확장성: 새로운 상태나 속성을 추가할 때 구조적인 변화 없이 확장이 가능합니다.

- 단점
    - 쿼리 복잡성 증가: 상태 정보를 조회할 때 추가적인 조인이 필요하므로 쿼리가 복잡해질 수 있습니다.
    - 성능 저하: 대용량 데이터의 경우 조인 연산이 성능에 영향을 미칠 수 있습니다.
    - 관리 오버헤드: 상태 테이블을 별도로 관리해야 하므로 시스템의 복잡도가 증가할 수 있습니다.

<br>

### 2) 매핑 테이블에서 상태 테이블을 참조하는 방식

- 매핑 테이블을 사용하여 사용자와 모임 간의 관계를 관리하고, 
- 상태 정보는 별도의 상태 테이블에서 관리하는 방식입니다.

#### (1) 사용자 ID와 모임 ID로 관계 관리

![image](https://github.com/user-attachments/assets/26e9740b-6a99-4244-bdea-58c0e9a808f8)

- 매핑 테이블이 사용자 ID와 모임 ID로 구성되어, 
- 상태 정보는 별도의 상태 테이블에서 관리됩니다.

- 장점
    - 단순한 구조: 매핑 테이블이 기본적으로 사용자 ID와 모임 ID로만 구성되어 구조가 명확합니다.
    - 유연한 상태 정보 관리: 상태 정보가 별도의 테이블에서 관리되므로 변경이 쉽습니다.

- 단점
    - 복잡한 쿼리: 상태 정보를 조회할 때 매핑 테이블과 상태 테이블 간의 조인 작업이 필요해 복잡해집니다.
    - 성능 저하: 대량의 데이터를 처리할 때 조인 연산으로 성능 저하가 발생할 수 있습니다.

#### (2) 매핑 ID로 관계 관리

![image](https://github.com/user-attachments/assets/cfff8aea-2f59-42a4-89b7-22fac4a4f83c)

매핑 테이블에 매핑 ID를 추가하여 사용자와 모임 간의 관계를 고유하게 식별한 후, 상태 정보를 매핑 ID를 통해 별도의 상태 테이블에서 관리합니다.

- 장점
    - 고유 식별성: 매핑 ID를 통해 관계를 명확하게 식별할 수 있습니다.
    - 확장성: 매핑 ID를 사용하여 다양한 상태 정보와 속성을 연결할 수 있습니다.

단점
    - 관리 복잡성 증가: 매핑 ID와 상태 테이블 간의 관계를 관리해야 하므로 테이블 구조가 복잡해질 수 있습니다.
    - 추가적인 조인 필요: 상태 정보를 조회하기 위해 매핑 ID를 통해 조인 작업이 필요합니다.

<br>

## 3. 매핑 테이블에 상태 정보를 포함하는 경우

![image](https://github.com/user-attachments/assets/f9adf4e2-0750-4d90-987e-7c586c169ace)

- 매핑 테이블에 상태 정보를 포함하는 방식은 상태 정보를 별도로 관리하지 않고, 
- 매핑 테이블 자체에 상태 필드를 추가하여 관리하는 방법입니다.

- 장점
    - 단순한 데이터 구조: 관계와 상태 정보를 하나의 테이블에서 관리하므로 데이터 구조가 간단해집니다.
    - 빠른 조회 성능: 추가적인 조인 작업 없이 상태 정보를 바로 조회할 수 있어 성능이 향상됩니다.
    - 유지보수 용이성: 상태 정보가 간단할 경우, 한 테이블에서 관리하므로 유지보수가 간편해집니다.

- 단점
    - 데이터 중복 가능성: 상태 정보가 중복 저장될 수 있어 데이터 일관성에 주의해야 합니다.
    - 확장성 제한: 상태 정보가 복잡해지거나 추가 속성이 많아지면 매핑 테이블이 비대해질 수 있습니다.
    - 정규화 위반 가능성: 상태 정보를 포함함으로써 정규화 원칙을 일부 희생해야 할 수 있습니다.

<br>

## 4. 결론

사용자와 모임 간의 관계 및 상태 정보를 관리하는 방법은 시스템의 요구 사항과 데이터의 복잡성에 따라 달라집니다. 상태 정보가 단순하고 변화가 많지 않은 경우에는 매핑 테이블에 상태 정보를 포함시키는 것이 데이터 구조를 단순화하고 성능을 향상시키는 데 유리합니다. 반면, 상태 정보가 복잡하거나 확장 가능성이 높다면 별도의 상태 테이블을 사용하는 것이 더 적합할 수 있습니다.

이번 설계에서는 상태 정보가 단순했기 때문에 매핑 테이블에 상태 정보를 포함하는 방식으로 선택하여 성능과 유지보수성에서 효율성을 달성할 수 있었습니다.