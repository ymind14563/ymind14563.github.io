---
layout: post
title: "JPA와 MyBatis "
date: 2024-12-24
categories: 
    - "JPA"
    - "MyBatis"
---


## 1. 개념적 차이

### 1) JPA (Java Persistence API)
- Java 표준 ORM(Object Relational Mapping) 기술입니다.
- 데이터를 객체 지향적으로 처리하며, 데이터베이스 테이블을 자바 클래스(Entity)로 매핑합니다.
- Hibernate, EclipseLink 등 다양한 구현체가 있으며, 데이터를 객체화해 비즈니스 로직을 작성합니다.

### 2) MyBatis
- SQL 중심의 데이터 매핑 프레임워크입니다.
- XML Mapper 또는 어노테이션으로 SQL을 작성하고 이를 자바 객체와 매핑합니다.
- SQL을 명시적으로 작성해 데이터 조작을 세부적으로 제어할 수 있습니다.

<br>

## 2. 주요 차이점

### 1) 접근 방식
- JPA는 ORM을 기반으로 객체 지향적으로 데이터를 처리합니다. 테이블과 객체 간의 매핑을 자동으로 관리하여 코드의 복잡도를 줄입니다.
- MyBatis는 SQL을 직접 작성하여 데이터베이스와 상호작용합니다. 이를 통해 SQL의 세부적인 동작을 개발자가 완전히 제어할 수 있습니다.

### 2) 생산성과 자동화
- JPA는 자동화된 CRUD 기능을 제공합니다. 기본적인 데이터 작업에서는 높은 생산성을 보여줍니다.
- MyBatis는 모든 SQL을 개발자가 직접 작성해야 하므로, 초기 작업량은 더 많습니다.

### 3) 유연성
- JPA는 자동화 덕분에 복잡한 SQL 작업에서는 유연성이 떨어질 수 있습니다.  
  예를 들어, 복잡한 조인 쿼리나 비정형 데이터는 처리하기 어렵습니다.
- MyBatis는 SQL을 자유롭게 작성할 수 있어, 복잡한 데이터 작업에서도 유연하게 대처할 수 있습니다.

<br>

## 3. JPA의 특징

### 1) ORM 기반 데이터 처리
- 데이터를 객체로 다루며, 데이터베이스 테이블과 객체를 매핑합니다.
- 어노테이션(`@Entity`, `@Id`, `@GeneratedValue`)을 사용해 테이블 구조를 코드로 표현합니다.

```java
@Entity
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private String email;

    // Getters and Setters
}
```

### 2) JPQL(Java Persistence Query Language)
- JPQL은 객체를 기준으로 작성되는 쿼리 언어입니다. SQL과 유사하지만, 테이블 대신 객체를 다룹니다.

```java
@Query("SELECT u FROM User u WHERE u.email = :email")
User findByEmail(@Param("email") String email);
```

### 3) 주요 장점
- **자동화**: CRUD 및 관계 매핑 자동화로 생산성이 높습니다.
- **최적화**: 2차 캐싱, 지연 로딩 등 내장된 성능 최적화 기능을 제공합니다.
- **표준화**: Java EE 표준 기술로, 여러 구현체와 호환 가능합니다.

### 4) 주요 단점
- 복잡한 쿼리를 작성하기 어렵고, 성능 최적화가 필요한 경우 제약이 있을 수 있습니다.
- 디버깅이 어렵고, 자동 생성된 쿼리를 제어하기 어렵습니다.

<br>

## 4. MyBatis의 특징

### 1) SQL 중심 데이터 처리
- SQL을 직접 작성하며, XML Mapper 또는 어노테이션을 통해 객체와 데이터를 매핑합니다.

```xml
<mapper namespace="com.example.mapper.UserMapper">
    <select id="findByEmail" parameterType="String" resultType="User">
        SELECT id, name, email FROM user WHERE email = #{email}
    </select>
</mapper>
```

### 2) 높은 유연성
- SQL의 모든 부분을 개발자가 제어할 수 있어, 복잡한 데이터 작업이나 성능 최적화에 유리합니다.

### 3) 주요 장점
- **SQL 제어**: 복잡한 쿼리나 데이터베이스 작업을 직접 제어 가능.
- **유연성**: 다양한 데이터베이스 구조와 요구사항에 대응할 수 있음.

### 4) 주요 단점
- SQL 작성 및 유지보수에 시간이 많이 소요됩니다.
- 캐싱 및 배치 처리 등 고급 기능은 외부 기술과의 통합이 필요합니다.

<br>

## 5. 성능 비교

### 1) JPA
- 캐싱, 지연 로딩, 배치 처리 등 내장 최적화 기능을 제공합니다.
- 그러나 자동 생성된 쿼리가 비효율적일 경우 성능 병목이 발생할 수 있습니다.

### 2) MyBatis
- SQL 성능 최적화를 개발자가 직접 제어할 수 있어, 복잡한 쿼리나 대규모 데이터 처리에서 유리합니다.
- 기본적으로 캐싱 기능이 부족하며, 외부 기술을 도입해 보완해야 합니다.

<br>

## 6. 선택 기준

### 1) JPA가 적합한 경우
- 관계형 데이터가 많고, 객체 지향적인 설계를 선호하는 경우.
- CRUD와 관계 매핑의 자동화를 통해 생산성을 높이고 싶을 때.
- 대규모 엔터프라이즈 애플리케이션.

### 2) MyBatis가 적합한 경우
- 복잡한 SQL 쿼리와 데이터 변환 로직이 많은 프로젝트.
- 데이터베이스 중심의 설계를 필요로 하는 경우.
- SQL의 세부적인 동작을 완전히 제어해야 하는 경우.

<br>

## 7. JPA와 MyBatis의 조합 활용

두 기술을 조합해 사용하는 방식도 가능합니다. JPA는 CRUD 작업과 기본적인 관계 매핑에 사용하고, MyBatis는 복잡한 SQL 작업에 활용할 수 있습니다.

```java
@Repository
public interface UserJpaRepository extends JpaRepository<User, Long> {
    // 기본 CRUD 처리
}

@Mapper
public interface UserMapper {
    // 복잡한 SQL 작업 처리
    List<User> findUsersWithComplexCriteria();
}
```